{"version":3,"sources":["components/Toggle/toggle.js","pages/TogglePage/togglePage.js","App.js","serviceWorker.js","index.js"],"names":["Toggle","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","open","setState","isOpen","close","toggle","state","initialIsOpen","inherits","createClass","key","value","children","Component","ToggleButton","_ref","onClickOn","onClickOff","isActive","react_default","a","createElement","className","classname","is-active","onClick","TogglePage","apply","arguments","toggle_Toggle","isInitialOpen","_ref2","togglePage_ToggleButton","App","togglePage_TogglePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAGaA,SAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAMRQ,KAAO,WACLP,EAAKQ,SAAS,CAAEC,QAAQ,KARPT,EAWnBU,MAAQ,WACNV,EAAKQ,SAAS,CAAEC,QAAQ,KAZPT,EAenBW,OAAS,WACPX,EAAKQ,SAAS,SAAAI,GAAK,MAAK,CACtBH,QAASG,EAAMH,WAfjBT,EAAKY,MAAQ,CACXH,OAAQV,EAAMc,eAHCb,EADrB,OAAAC,OAAAa,EAAA,EAAAb,CAAAJ,EAAAC,GAAAG,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,EAAAmB,IAAA,SAAAC,MAAA,WAsBW,IACCR,EAAWN,KAAKS,MAAhBH,OACR,OAAON,KAAKJ,MAAMmB,SAAS,CACzBT,SACAC,MAAOP,KAAKO,MACZH,KAAMJ,KAAKI,KACXI,OAAQR,KAAKQ,aA5BnBd,EAAA,CAA4BsB,cCGtBC,EAAe,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,UAAWC,EAAbF,EAAaE,WAAYC,EAAzBH,EAAyBG,SAAzB,OAEjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAU,CAACC,YAAaN,IAAYO,QAAST,GAAhE,MACAG,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAU,CAACC,aAAcN,IAAYO,QAASR,GAAjE,SAKOS,EAAb,SAAAlC,GAAA,SAAAkC,IAAA,OAAA/B,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,GAAA/B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAAC,MAAA9B,KAAA+B,YAAA,OAAAjC,OAAAa,EAAA,EAAAb,CAAA+B,EAAAlC,GAAAG,OAAAc,EAAA,EAAAd,CAAA+B,EAAA,EAAAhB,IAAA,SAAAC,MAAA,WAEI,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,+KAGAF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAAf,mlBAsCJH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,iGAGAF,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAACQ,EAAD,CAAQC,eAAe,GACpB,SAAAC,GAAA,IAAE5B,EAAF4B,EAAE5B,OAAQF,EAAV8B,EAAU9B,KAAMG,EAAhB2B,EAAgB3B,MAAhB,OACCe,EAAAC,EAAAC,cAACW,EAAD,CAAchB,UAAWf,EAAMgB,WAAYb,EAAOc,SAAUf,YAvD1EuB,EAAA,CAAgCb,aCQjBoB,mLAhBX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAACa,EAAD,OAEFf,EAAAC,EAAAC,cAAA,yCAVUR,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42e7a8c7.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: props.initialIsOpen,\n    };\n  }\n\n  open = () => {\n    this.setState({ isOpen: true });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return this.props.children({\n      isOpen,\n      close: this.close,\n      open: this.open,\n      toggle: this.toggle,\n    });\n  }\n}\n\nToggle.propTypes = {\n  children: PropTypes.func,\n  initialIsOpen: PropTypes.bool,\n};\n","import React, { Component } from 'react';\nimport classname from \"classnames\";\n\nimport './toggle.css';\nimport { Toggle } from '../../components';\n\nconst ToggleButton = ({onClickOn, onClickOff, isActive}) => (\n\n    <div className=\"button-toggleable\">\n      <button className={classname({'is-active': isActive})} onClick={onClickOn}>On</button>\n      <button className={classname({'is-active': !isActive})} onClick={onClickOff}>Off</button>\n    </div>\n\n)\n\nexport class TogglePage extends Component {\n  render() {\n    return (\n      <div className=\"explanation\">\n        <h2>Toggle with render props</h2>\n        <summary>\n          Toggle is a sort of bahavior used in a lot of components like; modals, toggle buttons, tooltips, or where we have two options either true or false basically\n        </summary>\n        <article>\n          <blockquote>\n            <pre className=\"lang-javascript prettyprint\">\n                {`\nclass Toggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: props.initialIsOpen,\n    };\n  }\n\n  open = () => {\n    this.setState({ isOpen: true });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return this.props.children({\n      isOpen,\n      close: this.close,\n      open: this.open,\n      toggle: this.toggle,\n    });\n  }\n}\n                `}\n            </pre>\n          </blockquote>\n        </article>\n        <h2>Toggle button example</h2>\n        <summary>\n          In this case we can reuse the toggle behavior and make our component separatly\n        </summary>\n        <article className=\"example\">\n          <Toggle isInitialOpen={false}>\n            {({isOpen, open, close}) => (\n              <ToggleButton onClickOn={open} onClickOff={close} isActive={isOpen} />\n            )}\n          </Toggle>\n        </article>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport { TogglePage } from \"./pages\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"layout\">\n        <header>\n          <h1>React Examples</h1>\n        </header>\n        <section className=\"body\">\n          <TogglePage></TogglePage>\n        </section>\n        <footer>\n          make by @gibran\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}